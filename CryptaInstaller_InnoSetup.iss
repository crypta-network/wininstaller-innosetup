; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "Crypta"
#include "cryptad_version.iss"
#define AppPublisher "crypta.network"
#define AppURL "https://crypta.network/"
#define AppExeName "bin\\cryptad-launcher.bat"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{FDB7C786-8205-4D04-A6B2-4159119EC892}
AppName={#AppName}
AppVersion={#AppVersion}
AppPublisher={#AppPublisher}
AppPublisherURL={#AppURL}
AppSupportURL={#AppURL}
AppUpdatesURL={#AppURL}
DefaultDirName={localappdata}\{#AppName}
DefaultGroupName={#AppName}
OutputBaseFilename=CryptaInstaller
SetupIconFile=resources\CryptaInstaller_InnoSetup.ico
UninstallDisplayIcon={app}\CryptaInstaller_InnoSetup_Uninstall.ico
UninstallDisplayName={#AppName}
SolidCompression=yes
PrivilegesRequired=lowest
WizardImageFile=resources\Wizard_CryptaInstall.bmp
WizardSmallImageFile=resources\Wizard_CryptaInstall_Small.bmp
; Approx space for jlink bundle + app data (~300 MiB)
ExtraDiskSpaceRequired=314572800
Compression=lzma2/ultra
InternalCompressLevel=ultra
RestartIfNeededByRun=False
AllowUNCPath=False
AllowNoIcons=yes
;Prevent installer from being run multiple times in parallel
SetupMutex=SetupMutex{#SetupSetting("AppId")}

#ifndef Arch
  #define Arch "arm64"
#endif

#if Arch == "x64"
ArchitecturesAllowed=x64os
#elif Arch == "arm64"
ArchitecturesAllowed=arm64
#else
  #error "Unsupported architecture: {#Arch}"
#endif

ArchitecturesInstallIn64BitMode=x64compatible

; Require Windows 10 or newer (any build)
MinVersion=10.0

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl,.\\translations\\Messages_en_utf8.isl"

[Files]
; DLL used for port checks
Source: "CryptaInstaller_InnoSetup_library\\CryptaInstaller_InnoSetup_library.dll"; DestDir: "{tmp}"; Flags: ignoreversion dontcopy

; Copy jlink distribution produced by cryptad build
Source: "artifacts\\cryptad-jlink-dist\\bin\\*"; DestDir: "{app}\\bin"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "artifacts\\cryptad-jlink-dist\\lib\\*"; DestDir: "{app}\\lib"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "artifacts\\cryptad-jlink-dist\\conf\\*"; DestDir: "{app}\\conf"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "artifacts\\cryptad-jlink-dist\\legal\\*"; DestDir: "{app}\\legal"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "artifacts\\cryptad-jlink-dist\\release"; DestDir: "{app}"; Flags: ignoreversion; AfterInstall: CryptadJarDoAfterInstall

; Optional: top-level README/licenses shipped with installer if any
Source: "install_node\\README.txt"; DestDir: "{app}"; Flags: ignoreversion skipifsourcedoesntexist
Source: "install_node\\licenses\\*"; DestDir: "{app}\\licenses"; Flags: ignoreversion recursesubdirs createallsubdirs skipifsourcedoesntexist
Source: "resources\\CryptaInstaller_InnoSetup_Uninstall.ico"; DestDir: "{app}"; Flags: ignoreversion

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Icons]
Name: "{group}\\{#AppName}"; Filename: "{app}\\{#AppExeName}"
Name: "{group}\\{cm:UninstallProgram,{#AppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\\{#AppName}"; Filename: "{app}\\{#AppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\\{#AppExeName}"; Flags: nowait postinstall skipifsilent shellexec; Description: "{cm:LaunchProgram,{#StringChange(AppName, '&', '&&')}}"

[UninstallDelete]
; TODO: enumerate expected files instead of wildcard if possible
Type: filesandordirs; Name: "{app}\\*"

[Code]
var
  sFproxyPort, sFcpPort: string;

function IsPortAvailable(sIpAddress: ansistring; wPort: word): boolean;
  external 'fIsPortAvailable@files:CryptaInstaller_InnoSetup_library.dll stdcall setuponly';

procedure CryptadJarDoAfterInstall();
var
  sConfigLines : array[0..3] of string;
begin
  if not FileExists(ExpandConstant('{app}\\cryptad.ini')) then begin
    sConfigLines[0] := 'fproxy.port=' + sFproxyPort;
    sConfigLines[1] := 'fcp.port=' + sFcpPort;
    sConfigLines[2] := 'node.downloadsDir=.\\downloads';
    sConfigLines[3] := 'End';
    SaveStringsToUTF8File(ExpandConstant('{app}\\cryptad.ini'), sConfigLines, False);
  end;
end;

function InitializeSetup: boolean;
var 
  RegKey: string;
  ExistingInstallation: Boolean;
  RegistryLocationRootKey: Integer;
  ExistingInstallationPath : string;
begin
  result := true;
  ExistingInstallation := false;
  
  RegKey := ExpandConstant('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{#SetupSetting("AppId")}_is1');

  if RegKeyExists(HKLM, RegKey) then begin 
    ExistingInstallation := true;
    RegistryLocationRootKey := HKLM;
  end;
  if RegKeyExists(HKCU, RegKey) then begin 
    ExistingInstallation := true;
    RegistryLocationRootKey := HKCU;
  end;
  if RegKeyExists(HKU, RegKey) then begin 
    ExistingInstallation := true;
    RegistryLocationRootKey := HKU;
  end;

  if ExistingInstallation then begin
    if RegQueryStringValue(RegistryLocationRootKey, RegKey, 'InstallLocation', ExistingInstallationPath) then begin
      case MsgBox(CustomMessage('ErrorCryptaAlreadyInstalled'), mbError, MB_YESNO) of
        IDYES: begin
          result := True; // overwrite in-place
        end;
        IDNO: begin
          result := False;
        end;
      end;
    end;
  end;
end;

procedure InitializeWizard;
var
  iFproxyPort, iFcpPort : integer;
begin
  iFproxyPort := 8888;
  repeat
    if IsPortAvailable('127.0.0.1', iFproxyPort) then
      Break
    else begin
      iFproxyPort := iFproxyPort + 1;
      Continue;
    end;
  until iFproxyPort = 8888 + 256;
  sFproxyPort := IntToStr(iFproxyPort);

  iFcpPort := 9481;
  repeat
    if IsPortAvailable('127.0.0.1', iFcpPort) then
      Break
    else begin
      iFcpPort := iFcpPort + 1;
      Continue;
    end;
  until iFcpPort = 9481 + 256;
  sFcpPort := IntToStr(iFcpPort);
end;
