name: Build Crypta Installer

on:
  workflow_dispatch:
    inputs:
      cryptad-git-ref:
        description: Cryptad git ref
        type: string
        default: main
      jdk-version:
        description: JDK major version to use (Temurin)
        type: string
        default: "21"

jobs:
  build-cryptad:
    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]
    runs-on: ${{ matrix.os }}
    env:
      RUNTIME_IDENTIFIER: ${{ matrix.os == 'windows-latest' && 'x64' || 'arm64'}}
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: "temurin"

      - name: Checkout cryptad source code
        uses: actions/checkout@v4
        with:
          repository: crypta-network/cryptad
          ref: ${{ inputs.cryptad-git-ref }}
          fetch-depth: 0

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Build cryptad (jlink dist)
        shell: pwsh
        run: |
          ./gradlew.bat --version
          ./gradlew.bat build --no-daemon --stacktrace

      - name: Locate jlink image and package it
        shell: pwsh
        id: pack
        run: |
          $root    = Get-Location
          $distDir = Join-Path $root 'build/distributions'
          $libsDir = Join-Path $root 'build/libs'

          if (-not (Test-Path $distDir)) { Write-Error "Missing jlink distributions dir: $distDir"; exit 1 }
          if (-not (Test-Path $libsDir)) { Write-Error "Missing libs dir: $libsDir"; exit 1 }

          # Read version from the built jar manifest
          $jar = Get-ChildItem -Path $libsDir -Filter '*cryptad*.jar' -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $jar) { Write-Error "Could not find cryptad jar in $libsDir"; exit 1 }
          jar tf "$($jar.FullName)" | Out-Null
          jar xvf "$($jar.FullName)" META-INF/MANIFEST.MF | Out-Null
          $impl = Get-Content .\META-INF\MANIFEST.MF -Raw
          Remove-Item -Recurse -Force .\META-INF -ErrorAction SilentlyContinue
          $implVer = ($impl -split "`n" | Where-Object { $_ -match '^Implementation-Version:' } | ForEach-Object { ($_ -split ':',2)[1].Trim() })
          if (-not $implVer) { $implVer = '1 unknown' }
          $parts = ($implVer -replace ';',' ') -split '\s+',2
          $verNum = $parts[0]
          if (-not $verNum) { $verNum = '1' }

          # Find jlink image under build/distributions
          $img = Get-ChildItem -Path $distDir -Directory -ErrorAction SilentlyContinue |
            Where-Object { Test-Path (Join-Path $_.FullName 'bin') -and (Test-Path (Join-Path $_.FullName 'lib')) } |
            Sort-Object LastWriteTime -Descending | Select-Object -First 1

          $tempExtract = $null
          if (-not $img) {
            # Maybe packaged as an archive; try .tar.gz then .zip
            $archive = Get-ChildItem -Path $distDir -File -Include *.tar.gz,*.zip -ErrorAction SilentlyContinue |
              Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if (-not $archive) { Write-Error "No jlink image or archive found in $distDir"; exit 1 }
            $tempExtract = New-Item -ItemType Directory -Path (Join-Path $env:RUNNER_TEMP 'cryptad_jlink') -Force
            if ($archive.Extension -ieq '.zip') {
              Expand-Archive -Path $archive.FullName -DestinationPath $tempExtract.FullName -Force
            } else {
              tar -xzf $archive.FullName -C $tempExtract.FullName
            }
            $img = Get-ChildItem -Path $tempExtract.FullName -Recurse -Directory -Depth 2 -ErrorAction SilentlyContinue |
              Where-Object { Test-Path (Join-Path $_.FullName 'bin') -and (Test-Path (Join-Path $_.FullName 'lib')) } |
              Sort-Object FullName | Select-Object -First 1
          }

          if (-not $img) { Write-Error 'Could not locate unpacked jlink image (bin/ and lib/ folder)'; exit 1 }
          Write-Host "Found image: $($img.FullName)"

          $out = Join-Path $root ("cryptad-jlink-v{0}.tar.gz" -f $verNum)
          Write-Host "Creating archive: $out"
          tar -czf $out -C $img.FullName .

          if ($tempExtract) { Remove-Item -Recurse -Force $tempExtract -ErrorAction SilentlyContinue }
          echo "archive_path=$out" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload jlink artifact
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-jlink-${{ env.RUNTIME_IDENTIFIER }}
          path: ${{ steps.pack.outputs.archive_path }}

  # Wintray no longer required with jlink launcher

  build:
    needs: [build-cryptad]

    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]

    runs-on: ${{ matrix.os }}

    env:
      RUNTIME_IDENTIFIER: ${{ matrix.os == 'windows-latest' && 'x64' || 'arm64'}}

    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: "temurin"

      - name: Checkout windows installer
        uses: actions/checkout@v4
        with:
          repository: crypta-network/wininstaller-innosetup

      # JRE no longer needed with jlink distribution

      - name: Download cryptad jlink distribution for this arch
        uses: actions/download-artifact@v4
        with:
          name: cryptad-jlink-${{ env.RUNTIME_IDENTIFIER }}
          path: ${{ github.workspace }}\artifacts

      # Wintray artifacts are no longer needed

      # No cryptad checkout required for jlink installer

      - uses: gradle/actions/wrapper-validation@v4

      - name: Unpack jlink and update setup files
        run: |
          .\gradlew.bat unpackJlink
          .\gradlew.bat updateSetupFile

      - name: Building the installer
        run: |
          "iscc.exe" "CryptaInstaller_InnoSetup.iss" /DArch=${{ env.RUNTIME_IDENTIFIER }}
        shell: cmd

      # signing moved to https://github.com/hyphanet/sign-windows-installer
      #     - name: Sign the installer
      #       uses: nextgens/authenticode-sign-action@v1.0.1
      #       if: ${{ github.event_name != 'pull_request' }}
      #       with:
      #         certificate: '${{ secrets.CERTIFICATES }}'
      #         credentials: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      #         key-uri: "projects/fpi-codesign/locations/europe-west3/keyRings/code-signing/cryptoKeys/certificate/cryptoKeyVersions/1"
      #         timestamp-url: 'http://timestamp.comodoca.com'
      #         description: 'Freenet Installer'
      #         description-url: 'https://freenetproject.org'
      #         folder: "Output"
      #         recursive: true
      #
      #     - name: Verify the signature
      #       if: ${{ github.event_name != 'pull_request' }}
      #       run: call "%programfiles(x86)%/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" verify /v /pa "Output/FreenetInstaller.exe"
      #       shell: cmd

      - name: Upload the installer as an artifact
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: cryptainstaller-${{ env.RUNTIME_IDENTIFIER }}
          path: "Output/CryptaInstaller.exe"
