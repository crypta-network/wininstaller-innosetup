name: Reusable - Build Crypta Installer

on:
  workflow_call:
    inputs:
      cryptad-git-ref:
        description: Cryptad git ref (branch, tag or SHA)
        required: false
        type: string
        default: main
      jdk-version:
        description: Temurin JDK major version
        required: false
        type: string
        default: "21"
      os-matrix:
        description: JSON array of Windows runners to build on
        required: false
        type: string
        default: '["windows-latest","windows-11-arm"]'
      upload-installer:
        description: Upload the final installer artifact
        required: false
        type: boolean
        default: true

jobs:
  build-cryptad:
    strategy:
      matrix:
        os: ${{ fromJson(inputs.os-matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      RUNTIME_IDENTIFIER: ${{ matrix.os == 'windows-latest' && 'x64' || 'arm64'}}
      ARTIFACT_ARCH: ${{ matrix.os == 'windows-latest' && 'amd64' || 'arm64'}}
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: "temurin"

      - name: Checkout cryptad source code
        uses: actions/checkout@v4
        with:
          repository: crypta-network/cryptad
          ref: ${{ inputs.cryptad-git-ref }}
          fetch-depth: 0
          path: cryptad

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Build cryptad (produces jpackage image)
        shell: pwsh
        working-directory: cryptad
        run: |
          ./gradlew.bat --version
          ./gradlew.bat build -x spotlessApply -x spotlessCheck -x spotlessJava -x spotlessJavaApply -x spotlessJavaCheck -x spotlessKotlin -x spotlessKotlinApply -x spotlessKotlinCheck -x spotlessKotlinGradle -x spotlessKotlinGradleApply -x spotlessInternalRegisterDependencies
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload jpackage image
        uses: actions/upload-artifact@v4
        with:
          name: cryptad-jpackage-${{ env.RUNTIME_IDENTIFIER }}
          path: cryptad/build/jpackage/Crypta

  # Wintray not required with jpackage launcher

  build:
    needs: [build-cryptad]

    strategy:
      matrix:
        os: ${{ fromJson(inputs.os-matrix) }}

    runs-on: ${{ matrix.os }}

    env:
      RUNTIME_IDENTIFIER: ${{ matrix.os == 'windows-latest' && 'x64' || 'arm64'}}
      ARTIFACT_ARCH: ${{ matrix.os == 'windows-latest' && 'amd64' || 'arm64'}}

    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: "temurin"

      - name: Checkout windows installer
        uses: actions/checkout@v4
        with:
          repository: crypta-network/wininstaller-innosetup

      # Download cryptad jpackage image for this arch
      - name: Download cryptad jpackage image for this arch
        uses: actions/download-artifact@v4
        with:
          name: cryptad-jpackage-${{ env.RUNTIME_IDENTIFIER }}
          path: ${{ github.workspace }}\jpackage

      # Wintray artifacts are no longer needed

      # No cryptad checkout required for jpackage installer (we use the downloaded image)

      - uses: gradle/actions/wrapper-validation@v4

      - name: Stage jpackage and update setup files
        run: |
          .\gradlew.bat stageJpackage
          .\gradlew.bat updateSetupFile

      - name: List jpackage contents
        run: |
          dir "${{ github.workspace }}\jpackage" /s
        shell: cmd

      - name: Building the installer
        run: |
          "iscc.exe" "CryptaInstaller_InnoSetup.iss" /DArch=${{ env.RUNTIME_IDENTIFIER }}
        shell: cmd

      # signing moved to https://github.com/hyphanet/sign-windows-installer
      #     - name: Sign the installer
      #       uses: nextgens/authenticode-sign-action@v1.0.1
      #       if: ${{ github.event_name != 'pull_request' }}
      #       with:
      #         certificate: '${{ secrets.CERTIFICATES }}'
      #         credentials: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      #         key-uri: "projects/fpi-codesign/locations/europe-west3/keyRings/code-signing/cryptoKeys/certificate/cryptoKeyVersions/1"
      #         timestamp-url: 'http://timestamp.comodoca.com'
      #         description: 'Freenet Installer'
      #         description-url: 'https://freenetproject.org'
      #         folder: "Output"
      #         recursive: true
      #
      #     - name: Verify the signature
      #       if: ${{ github.event_name != 'pull_request' }}
      #       run: call "%programfiles(x86)%/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" verify /v /pa "Output/FreenetInstaller.exe"
      #       shell: cmd

      - name: Upload the installer as an artifact
        uses: actions/upload-artifact@v4
        if: ${{ inputs.upload-installer }}
        with:
          name: cryptainstaller-${{ env.ARTIFACT_ARCH }}
          path: "Output/CryptaInstaller.exe"
