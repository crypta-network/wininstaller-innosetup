name: Build Crypta Installer

on:
  workflow_dispatch:
    inputs:
      cryptad-git-ref:
        description: Cryptad git ref
        type: string
        default: next
      wintray-git-ref:
        description: Cryptad Wintray git ref
        type: string
        default: master
      jdk-version:
        type: string
        default: "21"

jobs:
  build-cryptad:
    uses: crypta-network/cryptad/.github/workflows/build.yml@next
    with:
      git-ref: ${{ inputs.cryptad-git-ref }}
      jdk-version: ${{ inputs.jdk-version }}

  # Always build HEAD version for now
  build-wintray:
    uses: crypta-network/wintray/.github/workflows/build.yml@master
    with:
      git-ref: ${{ inputs.wintray-git-ref }}

  build:
    needs: [build-cryptad, build-wintray]

    strategy:
      matrix:
        os: [windows-latest, windows-11-arm]

    runs-on: ${{ matrix.os }}

    env:
      RUNTIME_IDENTIFIER: ${{ matrix.os == 'windows-latest' && 'x64' || 'arm64'}}

    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk-version }}
          distribution: "temurin"

      - name: Download Temurin JRE MSI
        shell: pwsh
        run: |
          $rid = $env:RUNTIME_IDENTIFIER
          switch ($rid) {
            'arm64'  { $arch = 'aarch64' ; break }
            'x64'    { $arch = 'x64'     ; break }
            default  { throw "Unsupported RUNTIME_IDENTIFIER: $rid" }
          }

          $version = '${{ inputs.jdk-version }}'
          $uri = "https://api.adoptium.net/v3/assets/feature_releases/$version/ga?architecture=$arch&image_type=jre&os=windows&page=0&page_size=1"
          $response = Invoke-RestMethod -Uri $uri

          $installer = $response.binaries[0]

          $destDir  = Join-Path -Path $PWD -ChildPath 'install_bundle'
          $outFile  = Join-Path -Path $destDir -ChildPath 'jre.msi'
          if (-not (Test-Path -Path $destDir -PathType Container)) {
              New-Item -ItemType Directory -Path $destDir -Force | Out-Null
          }

          Invoke-WebRequest -Uri $installer.installer.link -OutFile $outFile

      - name: Checkout windows installer
        uses: actions/checkout@v4
        with:
          repository: crypta-network/wininstaller-innosetup

      - name: Download built cryptad.jar
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{needs.build-cryptad.outputs.artifact-id}}
          path: ${{ github.workspace }}\artifacts
          merge-multiple: true

      - name: Download built CryptaTray.exe and CryptaTray.dll.config
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{fromJSON(needs.build-wintray.outputs.artifact-map)[format('wintray-{0}', env.RUNTIME_IDENTIFIER)]}}
          path: ${{ github.workspace }}\artifacts
          merge-multiple: true

      # The source code of cryptad is required to fetch dependent JAR files
      - name: Checkout cryptad source code
        uses: actions/checkout@v4
        with:
          repository: crypta-network/cryptad
          ref: ${{ inputs.cryptad-git-ref }}
          path: cryptad
          fetch-depth: 0

      - uses: gradle/actions/wrapper-validation@v4

      - name: Unzip and update setup files
        run: |
          .\gradlew.bat unzip
          .\gradlew.bat updateSetupFile

      - name: Building the installer
        run: |
          "iscc.exe" "CryptaInstaller_InnoSetup.iss"
        shell: cmd

      # signing moved to https://github.com/hyphanet/sign-windows-installer
      #     - name: Sign the installer
      #       uses: nextgens/authenticode-sign-action@v1.0.1
      #       if: ${{ github.event_name != 'pull_request' }}
      #       with:
      #         certificate: '${{ secrets.CERTIFICATES }}'
      #         credentials: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      #         key-uri: "projects/fpi-codesign/locations/europe-west3/keyRings/code-signing/cryptoKeys/certificate/cryptoKeyVersions/1"
      #         timestamp-url: 'http://timestamp.comodoca.com'
      #         description: 'Freenet Installer'
      #         description-url: 'https://freenetproject.org'
      #         folder: "Output"
      #         recursive: true
      #
      #     - name: Verify the signature
      #       if: ${{ github.event_name != 'pull_request' }}
      #       run: call "%programfiles(x86)%/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" verify /v /pa "Output/FreenetInstaller.exe"
      #       shell: cmd

      - name: Upload the installer as an artifact
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: cryptainstaller-${{ env.RUNTIME_IDENTIFIER }}
          path: "Output/CryptaInstaller.exe"
