apply plugin: 'java-library'

repositories {
    mavenLocal() // TODO: use lib/ instead?
    maven { url 'https://mvn.freenetproject.org' }
    jcenter()
}

dependencies {
    api project(':cryptad')
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
def cryptadversion
task buildInfo {
    try {
        def gitcmd = "git"
        if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
            gitcmd = "C:\\Program Files\\Git\\bin\\git.exe"
        }
        def cmd = "${gitcmd} describe --always --abbrev=4 --dirty"
	def proc = cmd.execute(null, project.file("cryptad"))
	cryptadversion = proc.text.trim()
	println "Cryptad version: ${cryptadversion}"
    } catch (java.io.IOException e) {
        cryptadversion = "@unknown@"
    }
}

task unzip {
}

task updateSetupFile {
	doLast {
		def file = project.file("cryptad_version.iss")
		file.delete()
		file.write("#define AppVersion \"0.7.5 build ${cryptadversion}\"\r\n")

		file = project.file("cryptad_deps.iss")
		file.delete()
		configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
			dep -> 
			println "Processing dependency: ${dep.getName()}"
			
			switch(dep.getName()) {
				case "cryptad":
					file.append("Source: \"cryptad.jar\"; DestDir: \"{app}\"; Flags: ignoreversion; AfterInstall: CryptadJarDoAfterInstall\r\n"); break;
				case "freenet-ext":
					file.append("Source: \"${dep.getFile()}\"; DestDir: \"{app}\"; DestName: \"freenet-ext.jar\"; Flags: ignoreversion\r\n"); break;
				default:
					file.append("Source: \"${dep.getFile()}\"; DestDir: \"{app}\\libs\"; DestName: \"${stripVersionFromJar(dep.getFile().toString())}\"; Flags: ignoreversion;\r\n"); break;
			}			
		} 
	}
}

/**
 * Removes version and qualifier from a jar filename.
 * Examples:
 *   'jna-platform-5.17.0.jar'           → 'jna-platform.jar'
 *   'unbescape-1.1.6.RELEASE.jar'       → 'unbescape.jar'
 *   'foo-bar-2.0.0-RC1.jar'             → 'foo-bar.jar'
 *   'baz-3.4.5_SNAPSHOT.jar'            → 'baz.jar'
 */
String stripVersionFromJar(String fullPath) {
    String fileName = new File(fullPath).name
    // Regex explanation below
    def pattern = ~/^(.*?)-\d+(?:\.\d+)*(?:[._-]?(?:RELEASE|SNAPSHOT|RC\d*|M\d*|GA|FINAL|[A-Za-z]+))*\.jar$/
    def matcher = fileName =~ pattern
    if (matcher.matches()) {
        return "${matcher[0][1]}.jar"
    }
    return fileName
}

